[alias]
preflight = ! bash -c "rm -vf monitor/model.json && openaps report invoke monitor/model.json && test -n $(json -f monitor/model.json) && echo \"PREFLIGHT OK\" || ( mm-stick warmup fail 'NO PUMP MODEL RESPONDED' || mm-stick fail 'NO MEDTRONIC CARELINK STICK AVAILABLE')"
gather-data = report invoke monitor/glucose.json monitor/clock.json monitor/clock-zoned.json monitor/pump-history.json monitor/pump-history-zoned.json monitor/active-basal-profile.json monitor/reservoir.json monitor/settings.json monitor/status.json monitor/battery.json monitor/bg-targets.json monitor/insulin-sensitivities.json monitor/carb-ratios.json monitor/temp-basal-status.json monitor/latest-treatments.json
gather-history = report invoke monitor/pump-history.json monitor/pump-history-zoned.json
oref0-predict = report invoke predict/profile.json predict/iob.json predict/oref0.json
gather-and-predict = ! bash -c "openaps gather-data && openaps oref0-predict"
enact = report invoke control/enacted.json
check-recommendation = ! bash -c "json -f predict/oref0.json && test -n \"$(json -f predict/oref0.json duration)\" && (echo \"OK\" ) || echo \"No recommendation to send\""
check-recommendation-and-enact = ! bash -c "json -f predict/oref0.json && test -n \"$(json -f predict/oref0.json duration rate | tr -d ' ')\" && (echo \"OK\" && openaps enact ) || echo \"No recommendation to send\""
latest-ns-treatment-time = ! bash -c "openaps use latest-treatments shell | json created_at"
format-latest-nightscout-treatments = ! bash -c "nightscout cull-latest-openaps-treatments monitor/pump-history-zoned.json monitor/model.json $(openaps latest-ns-treatment-time) > monitor/upload-treatments.json"
upload = ! bash -c "openaps gather-history && openaps format-latest-nightscout-treatments && test $(json -f monitor/upload-treatments.json -a created_at eventType | wc -l ) -gt 0 && (openaps use ns-upload shell treatments.json monitor/upload-treatments.json ) || echo \"No recent treatments to upload\""
do-everything = ! bash -c "openaps preflight && (test -n \"$(json -f monitor/model.json)\" && openaps gather-and-predict && openaps check-recommendation-and-enact && openaps upload)"
wait-for-bg = ! bash -c "cp monitor/glucose.json monitor/last-glucose.json; while(diff -q monitor/last-glucose.json monitor/glucose.json); do echo -n .; sleep 10; openaps report invoke monitor/glucose.json; done"
enact-new = ! bash -c "rm -vf predict/oref0.json; openaps report invoke predict/oref0.json && cat predict/oref0.json && grep -q duration predict/oref0.json && ( openaps report invoke control/enacted.json && cat control/enacted.json ) || echo No action required"


[vendor "openapscontrib.mmhistorytools"]
path = .
module = openapscontrib.mmhistorytools

[vendor "openapscontrib.timezones"]
path = .
module = openapscontrib.timezones

[device "pump"]
vendor = openaps.vendors.medtronic
extra = secret.ini

[device "munge"]
vendor = openapscontrib.mmhistorytools

[device "tz"]
vendor = openapscontrib.timezones

[device "determine-basal"]
fields = iob current-temps glucose profile
cmd = oref0-determine-basal
vendor = openaps.vendors.process
args = 

[device "calculate-iob"]
fields = history profile clock
cmd = oref0-calculate-iob
vendor = openaps.vendors.process
args = 

[device "latest-treatments"]
vendor = openaps.vendors.process
extra = latest-treatments.ini

[device "ns-bgnow"]
vendor = openaps.vendors.process
extra = ns-bgnow.ini

[device "ns-upload"]
vendor = openaps.vendors.process
extra = ns-upload.ini

[device "get-profile"]
fields = settings bg-targets isf basals max-iob
cmd = oref0-get-profile
vendor = openaps.vendors.process
args = 

[report "monitor/model.json"]
device = pump
use = model
reporter = JSON

[report "monitor/glucose.json"]
device = ns-bgnow
use = shell
reporter = JSON

[report "monitor/pump-history.json"]
device = pump
count = 120
use = iter_pump
reporter = JSON

[report "monitor/pump-history-zoned.json"]
use = rezone
reporter = JSON
date = timestamp dateString start_at end_at created_at
adjust = missing
input = monitor/pump-history.json
device = tz
timezone = None
astimezone = True

[report "monitor/clock.json"]
device = pump
use = read_clock
reporter = JSON

[report "monitor/clock-zoned.json"]
use = clock
reporter = JSON
astimezone = False
date = None
adjust = missing
input = monitor/clock.json
device = tz
timezone = PST

[report "monitor/temp-basal-status.json"]
device = pump
use = read_temp_basal
reporter = JSON

[report "monitor/active-basal-profile.json"]
device = pump
use = read_selected_basal_profile
reporter = JSON

[report "monitor/reservoir.json"]
device = pump
use = reservoir
reporter = JSON

[report "monitor/settings.json"]
device = pump
use = settings
reporter = JSON

[report "monitor/status.json"]
device = pump
use = read_status
reporter = JSON

[report "monitor/battery.json"]
device = pump
use = read_battery_status
reporter = JSON

[report "monitor/bg-targets.json"]
device = pump
use = read_bg_targets
reporter = JSON

[report "monitor/insulin-sensitivities.json"]
device = pump
use = read_insulin_sensitivies
reporter = JSON

[report "monitor/carb-ratios.json"]
device = pump
use = read_carb_ratios
reporter = JSON

[report "monitor/latest-treatments.json"]
device = latest-treatments
use = shell
reporter = text

[report "monitor/latest-treatments.json.old"]
device = latest-treatments
use = shell
json_default = []
reporter = JSON
remainder = []

[report "monitor/mm-cleaned.json"]
device = munge
use = clean
infile = monitor/pump-history.json
reporter = JSON

[report "monitor/mm-reconciled.json"]
device = munge
use = reconcile
infile = ./monitor/mm-cleaned.json
reporter = JSON

[report "monitor/mm-resolved.json"]
device = munge
use = resolve
infile = ./monitor/mm-reconciled.json
reporter = JSON

[report "monitor/mm-normalized.json"]
use = normalize
reporter = JSON
basal_profile = monitor/active-basal-profile.json
zero_at = monitor/clock.json
device = munge
infile = monitor/mm-resolved.json

[report "predict/profile.json"]
use = shell
carb-ratios = monitor/carb-ratios.json
reporter = text
basals = monitor/active-basal-profile.json
settings = monitor/settings.json
bg-targets = monitor/bg-targets.json
device = get-profile
isf = monitor/insulin-sensitivities.json
max-iob = max_iob.json

[report "predict/iob.json"]
profile = predict/profile.json
use = shell
clock = monitor/clock-zoned.json
reporter = text
device = calculate-iob
history = monitor/pump-history-zoned.json

[report "predict/oref0.json"]
profile = predict/profile.json
use = shell
reporter = text
current-temps = monitor/temp-basal-status.json
device = determine-basal
iob = predict/iob.json
glucose = monitor/glucose.json

[report "control/enacted.json"]
device = pump
input = predict/oref0.json
use = set_temp_basal
reporter = JSON

