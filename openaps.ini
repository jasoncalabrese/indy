[device "pump"]
vendor = openaps.vendors.medtronic
extra = secret.ini

[device "nssgv"]
fields = 
cmd = bash
vendor = openaps.vendors.process
args = -c "bgnow.sh"

[vendor "openapscontrib.mmhistorytools"]
path = .
module = openapscontrib.mmhistorytools

[device "munge"]
vendor = openapscontrib.mmhistorytools

[device "determine-basal"]
fields = iob current-temps glucose profile
cmd = determine-basal
vendor = openaps.vendors.process
args = 

[device "calculate-iob"]
fields = history profile clock
cmd = calculate-iob
vendor = openaps.vendors.process
args = 

[report "monitor/glucose.json"]
device = nssgv
use = shell
reporter = text

[report "monitor/model.json"]
device = pump
use = model
reporter = JSON

[report "last_four_pump.json"]
device = pump
hours = 4.0
use = iter_pump_hours
reporter = JSON

[alias]
get = report invoke monitor/clock.json monitor/pump-history.json monitor/active-basal-profile.json monitor/reservoir.json monitor/settings.json monitor/status.json monitor/battery.json monitor/bg-targets.json monitor/insulin-sensitivities.json monitor/carb-ratios.json monitor/temp-basal-status.json
get-ns-glucose = report invoke monitor/glucose.json
gather-data = ! bash -c "openaps get-ns-glucose && openaps get"
mm-prepare = report invoke 01.prepare/mm-cleaned.json 01.prepare/mm-reconciled.json 01.prepare/mm-resolved.json 01.prepare/mm-normalized.json
diyps-predict = report invoke 02.diyps/profile.json 02.diyps/iob.json 02.diyps/diyps.json
analyze-and-predict = ! bash -c "openaps mm-prepare && openaps diyps-predict"
gather-and-predict = ! bash -c "openaps gather-data && openaps analyze-and-predict"
enact = report invoke 02.diyps/enacted.json
check-recommendation = ! bash -c "json -f 02.diyps/diyps.json && test -n \"$(json -f 02.diyps/diyps.json duration)\" && (echo \"OK\" ) || echo \"No recommendation to send\""
check-recommendation-and-enact = ! bash -c "json -f 02.diyps/diyps.json && test -n \"$(json -f 02.diyps/diyps.json duration rate | tr -d ' ')\" && (echo \"OK\" && openaps enact ) || echo \"No recommendation to send\""
do-everything = ! bash -c "openaps gather-and-predict && openaps check-recommendation-and-enact"

[report "monitor/pump-history.json"]
device = pump
count = 120
use = iter_pump
reporter = JSON

[report "monitor/clock.json"]
device = pump
use = read_clock
reporter = JSON

[report "monitor/temp-basal-status.json"]
device = pump
use = read_temp_basal
reporter = JSON

[report "monitor/active-basal-profile.json"]
device = pump
use = read_selected_basal_profile
reporter = JSON

[report "monitor/reservoir.json"]
device = pump
use = reservoir
reporter = JSON

[report "monitor/settings.json"]
device = pump
use = settings
reporter = JSON

[report "monitor/status.json"]
device = pump
use = read_status
reporter = JSON

[report "monitor/battery.json"]
device = pump
use = read_battery_status
reporter = JSON

[report "monitor/bg-targets.json"]
device = pump
use = read_bg_targets
reporter = JSON

[report "monitor/insulin-sensitivities.json"]
device = pump
use = read_insulin_sensitivies
reporter = JSON

[report "monitor/carb-ratios.json"]
device = pump
use = read_carb_ratios
reporter = JSON

[report "01.prepare/mm-cleaned.json"]
device = munge
use = clean
infile = monitor/pump-history.json
reporter = JSON

[report "01.prepare/mm-reconciled.json"]
device = munge
use = reconcile
infile = ./01.prepare/mm-cleaned.json
reporter = JSON

[report "01.prepare/mm-resolved.json"]
device = munge
use = resolve
infile = ./01.prepare/mm-reconciled.json
reporter = JSON

[report "01.prepare/mm-normalized.json"]
use = normalize
reporter = JSON
basal_profile = monitor/active-basal-profile.json
zero_at = monitor/clock.json
device = munge
infile = 01.prepare/mm-resolved.json

[device "get-profile"]
fields = settings bg-targets isf basals carb-ratios max-iob
cmd = get-profile
vendor = openaps.vendors.process
args = 

[report "02.diyps/profile.json"]
use = shell
carb-ratios = monitor/carb-ratios.json
reporter = text
basals = monitor/active-basal-profile.json
settings = monitor/settings.json
bg-targets = monitor/bg-targets.json
device = get-profile
isf = monitor/insulin-sensitivities.json
max-iob = max_iob.json

[report "02.diyps/iob.json"]
profile = 02.diyps/profile.json
use = shell
clock = monitor/clock.json
reporter = text
device = calculate-iob
history = monitor/pump-history.json

[report "02.diyps/diyps.json"]
profile = 02.diyps/profile.json
use = shell
reporter = text
current-temps = monitor/temp-basal-status.json
device = determine-basal
iob = 02.diyps/iob.json
glucose = monitor/glucose.json

[report "02.diyps/enacted.json"]
device = pump
input = 02.diyps/diyps.json
use = set_temp_basal
reporter = JSON

